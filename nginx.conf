events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        application/javascript
        application/json
        text/css
        text/javascript
        application/x-javascript;

    # Map for CORS handling
    map $request_method $cors_method {
        OPTIONS 11;
        default 0;
    }

    # HTTP server (Port 80)
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # CORS headers for all responses
        location / {
            # Handle CORS preflight requests
            if ($cors_method = 11) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
                add_header 'Access-Control-Max-Age' 3600 always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }

            # Regular CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            
            try_files $uri $uri/ =404;
        }

        # Serve manifest.json with specific headers
        location = /manifest.json {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json; charset=utf-8' always;
            add_header 'Cache-Control' 'no-cache, no-store, must-revalidate' always;
            add_header 'Pragma' 'no-cache' always;
            add_header 'Expires' '0' always;
            try_files $uri =404;
        }

        # Serve JavaScript files
        location ~ \.js$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/javascript; charset=utf-8' always;
            add_header 'Cache-Control' 'public, max-age=3600' always;
            try_files $uri =404;
        }

        # Serve CSS files
        location ~ \.css$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'text/css; charset=utf-8' always;
            add_header 'Cache-Control' 'public, max-age=3600' always;
            try_files $uri =404;
        }

        # Health check for K8s
        location /health {
            access_log off;
            add_header 'Content-Type' 'text/plain' always;
            return 200 'OK';
        }
    }

    # HTTPS server (Port 443)
    server {
        listen 443 ssl;
        http2 on;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;

        # CORS headers for all responses
        location / {
            # Handle CORS preflight requests
            if ($cors_method = 11) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
                add_header 'Access-Control-Max-Age' 3600 always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }

            # Regular CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            add_header 'Strict-Transport-Security' 'max-age=31536000; includeSubDomains' always;
            
            try_files $uri $uri/ =404;
        }

        # Serve manifest.json with specific headers
        location = /manifest.json {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json; charset=utf-8' always;
            add_header 'Cache-Control' 'no-cache, no-store, must-revalidate' always;
            add_header 'Pragma' 'no-cache' always;
            add_header 'Expires' '0' always;
            try_files $uri =404;
        }

        # Serve JavaScript files
        location ~ \.js$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/javascript; charset=utf-8' always;
            add_header 'Cache-Control' 'public, max-age=3600' always;
            try_files $uri =404;
        }

        # Serve CSS files
        location ~ \.css$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'text/css; charset=utf-8' always;
            add_header 'Cache-Control' 'public, max-age=3600' always;
            try_files $uri =404;
        }

        # Health check for K8s
        location /health {
            access_log off;
            add_header 'Content-Type' 'text/plain' always;
            return 200 'OK';
        }
    }
}